#!/usr/bin/env python3 
"""Command-line interface for the ``avocet`` tool."""
##############################################################################
# Copyright (c) 2020, Kenneth P. J. Dyer <kenneth@avoceteditors.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder nor the name of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##############################################################################

# Module Imports
import argparse
import logging
import pkg_resources

############################ VERSION REPORT ##################################
prog = "avocet"
def report_version(args):
    """Reports version and developer information to the command-line"""

    # Instantiate Variable
    byline = "Reference Utilities for Conlangers"
    author = "Kenneth P. J. Dyer <kenneth@avoceteditors.com>"
    comp = "Avocet Editorial Consulting"
    version_avocet = pkg_resources.get_distribution("avocet").version
    version_dion = pkg_resources.get_distribution("dion").version
    version_wulfila = pkg_resources.get_distribution("wulfila").version

    # Build Verbose Output
    if args.verbose:

        content = [
            f"{prog.capitalize()} - {byline}", 
           author, 
            comp, 
            "Versions:",
            f"- Avocet Tools           v.{version_avocet}", 
            f"- Dion Text Processor    v.{version_dion}",
            f"- Wulfila Language Tools v.{version_wulfila}",
            "\n"]

    # Build Non-verbose Output
    else:
        content = [f"{prog} - version {version_wulfila}"]

    print("\n  ".join(content))

############################ VERSION REPORT ##################################
def get_parser():
    """Configures and returns argparse parser"""

    # Initialize Parser
    parser = argparse.ArgumentParser(prog=prog)
    parser.set_defaults(func=report_version)

    ########################## OPTIONS ####################################
    dir_opts = parser.add_argument_group("Path Options")

    # Cache Option
    dir_opts.add_argument(
        "-c", "--cache", default=None,
        help="Specifies the path to the cache file.\n\n"
        "When using the default value for this option, "
        f"``{prog}`` uses the ``-C, --cwd`` option to search for the project root. "
        "Once the project root is found, it creates an ``.avocet`` file in that directory."
    )

    # CWD Option
    dir_opts.add_argument(
        "-C", "--cwd", default=".", 
        help="Specifies the working directory.\n\n"
        "The working directory provides a starting point in locating the project root. "
        f"``{prog}`` searches up from the working directory to locate the project root "
        "(that is, the directory that contains the ``project.yml`` file).\n\n"
        f"If ``{prog}`` fails to locate the project root, the application fails")

    ####################### LOGGING OPTIONS #############################
    log_opts = parser.add_argument_group(
        "Logging Options",
        "Provides options for configuring the logging output.")

    # Debug Option
    log_opts.add_argument(
        "-D", "--debug", action="store_true", 
        help="Enables debugging information in log messages.\n\n"
        "By default, logs print to stdout, providing the log level and message."
        "When using this option, log messages also provide a parenthetical reference showing "
        "the function name, filename, and line number.  This is useful for developers "
        "who would like to identify the location from which the log was called."
    )

    # Verbose Option
    log_opts.add_argument(
        "-v", "--verbose", action="store_true", 
        help="Enables increased verbosity from the logger.\n\n"
        "When set alone, this option increases the logging level to include"
    )

    ############################# COMMANDS #################################


    cmds = parser.add_subparsers(title="Commands", help=f"Specifies the operation ``{prog}`` performs")

    cmd_Ver = cmds.add_parser("version", help="Reports build and version information")
    return parser

if __name__ == "__main__":

    # Parse Arguments
    args = get_parser().parse_args()

    # Logging Configuration
    log_format = "[%(levelname)s]: %(message)s"
    log_level = logging.WARN

    # Set Log Format
    if args.debug:
        log_format = "[%(levelname)s]: %(message)s (%(funcName)s in %(filename)s:%(lineno)d)"

    # Set Log Level
    if args.verbose and args.debg:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO

    logging.basicConfig(format=log_format, level=log_level)

    # Execute Function
    args.func(args)
